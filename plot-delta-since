#!/usr/bin/env python3

"""
plot-delta-since plots the difference between adjacent wake->sleep (bed) times.

Usage:

    parse-saa < sleep-export.csv | tac | plot-delta-since

Input events must be presented in ascending chronological order.
"""

import fileinput
import sys

import matplotlib.dates as mdates
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

import _lib
from _lib.ldatetime import SECONDS_IN_DAY, SECONDS_IN_HOUR
from _lib.levent import merge_adjoining, parse_events
from _lib.litertools import nextnrfull


def main(argv=None):
    args = _lib.parse_args(argv)

    data = _build_dataframe(fileinput.input(files=args.input))

    plt.ioff()
    plt.switch_backend("Agg")
    plt.style.use("seaborn-darkgrid")

    fig, ax = plt.subplots(dpi=args.dpi,
                           figsize=(args.figsize_width_inches,
                                    args.figsize_height_inches))
    ax.step(data.index, data["delta"], "-", label="Î” bed time")
    ax.plot(data.index, data["sma"], "-", label="SMA (14d)")
    ax.lines[0].set_linewidth(1)
    ax.lines[0].set_alpha(0.5)
    ax.lines[1].set_linewidth(3)
    ax.lines[1].set_alpha(0.8)
    ax.legend()

    xloc = mdates.AutoDateLocator(minticks=3, maxticks=10)
    xfmt = mdates.ConciseDateFormatter(xloc)
    ax.xaxis.set_major_locator(xloc)
    ax.xaxis.set_major_formatter(xfmt)

    @plt.FuncFormatter
    def _format_ytick(v, unused_pos):
        return int(v / SECONDS_IN_HOUR)
    ax.yaxis.set_major_locator(plt.MultipleLocator(4 * SECONDS_IN_HOUR))
    ax.axhline(SECONDS_IN_DAY, color="black", linewidth=1, dashes=(1, 2))
    ax.yaxis.set_major_formatter(_format_ytick)

    fig.tight_layout()
    fig.savefig(args.output)


def _build_dataframe(file):
    df = pd.DataFrame.from_records(
        np.fromiter(_deltas(file),
                    dtype=[("date",  "datetime64[ns]"),
                           ("delta", "uint32")]),
        index="date")
    df["sma"] = df.rolling(window=14)["delta"].mean()
    return df


def _deltas(file):
    for events in nextnrfull(merge_adjoining(parse_events(file))):
        last_event, next_event = events[0], events[1]
        delta_seconds = (next_event.since - last_event.since).total_seconds()
        yield next_event.since, delta_seconds


if __name__ == "__main__":
    sys.exit(main(sys.argv))
