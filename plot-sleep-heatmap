#!/usr/bin/env python3

"""
plot-sleep-heatmap tallies time spent asleep by wake weekday and hour,
then plots a heatmap visualising sleep time concentration.
Dark cells indicate hours most consistently spent asleep.

Usage:

    parse-saa < sleep-export.csv | tac | plot-sleep-heatmap

Input events must be presented in ascending chronological order.
"""

import fileinput
import sys

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns

import _lib
from _lib.ldatetime import cellsp, weekday_idx, weekday_name
from _lib.levent import parse_events


def main(argv=None):
    args = _lib.parse_args(argv)

    data = _build_dataframe(fileinput.input(files=args.input))

    plt.ioff()
    plt.switch_backend("Agg")
    sns.set_theme(style="ticks")

    fig, (ax, cax) = plt.subplots(
        dpi=args.dpi,
        figsize=(args.figsize_width_inches, args.figsize_height_inches),
        ncols=2, gridspec_kw={"width_ratios": [0.98, 0.02]})
    mesh = ax.pcolormesh(data.columns, data.index, data,
                         cmap=sns.color_palette("Blues", as_cmap=True),
                         rasterized=True)

    @plt.FuncFormatter
    def _format_xtick(x, unused_pos):
        hour = int(x)
        return f"{hour:02}:00"
    ax.xaxis.set_major_locator(plt.MultipleLocator(3))
    ax.xaxis.set_major_formatter(_format_xtick)

    @plt.FuncFormatter
    def _format_ytick(v, unused_pos):
        idx = int(v)
        if idx < 0 or idx > 6:
            return ""
        return weekday_name(idx)
    ax.yaxis.set_major_formatter(_format_ytick)
    ax.invert_yaxis()

    fig.colorbar(mesh, cax)

    fig.tight_layout()
    fig.savefig(args.output)


def _build_dataframe(file):
    return (pd.DataFrame.from_records(list(_cellularise(file)))
            .pivot_table(index="wake weekday",
                         columns="time",
                         values="intersectedness",
                         aggfunc=np.sum))


def _cellularise(file):
    event_stream = parse_events(file)
    try:
        event = next(event_stream)
    except StopIteration:
        return

    for pc in cellsp(event.since):
        pe = event.period()

        # Find a current or future sleep event.
        while event.until < pc.since:
            try:
                event = next(event_stream)
            except StopIteration:
                return

        yield {"intersectedness": pc.intersectedness(pe),
               "time": pc.since.hour,
               "wake weekday": weekday_idx(pc.until)}


if __name__ == "__main__":
    sys.exit(main(sys.argv))
