#!/usr/bin/env python3

"""
Plot sleep duration vs. bed time as a two-dimensional histogram.

Usage:

    parse-saa < sleep-export.csv | tac | plot-duration-by-since-time

"""

import fileinput
import sys
from datetime import time

import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns

import _lib
from _lib.ldatetime import SECONDS_IN_DAY, SECONDS_IN_HOUR, SECONDS_IN_MINUTE
from _lib.ldatetime import fmt_seconds_hhmm
from _lib.levent import merge_adjoining, parse_events


def main(argv=None):
    args = _lib.parse_args(argv, argspec={
        ("--bins-x",): {
            "type":    int,
            "metavar": "BINS",
            "default": 50,
            "help":    "Number of bins in the x-dimension.",
        },
        ("--bins-y",): {
            "type":    int,
            "metavar": "BINS",
            "default": 32,
            "help":    "Number of bins in the y-dimension.",
        }})

    data = _build_dataframe(fileinput.input(files=args.input))

    plt.ioff()
    plt.switch_backend("Agg")
    sns.set_theme(style="ticks")

    fig, ax = plt.subplots(
        dpi=args.dpi,
        figsize=(args.figsize_width_inches, args.figsize_height_inches))
    ax.hist2d(data["time"], data["duration"], bins=[args.bins_x, args.bins_y],
              cmap=sns.color_palette("rocket", as_cmap=True))

    @plt.FuncFormatter
    def _format_xtick(v, unused_pos):
        secs = int(v)
        if secs < 0 or secs >= SECONDS_IN_DAY:
            return ""
        return _seconds_to_time(secs)
    ax.xaxis.set_major_locator(plt.MultipleLocator(4 * SECONDS_IN_HOUR))
    ax.xaxis.set_major_formatter(_format_xtick)
    ax.xaxis.set_label_text("bed time of day")

    @plt.FuncFormatter
    def _format_ytick(v, unused_pos):
        return fmt_seconds_hhmm(v)
    ax.set_ylim(ymin=4 * SECONDS_IN_HOUR, ymax=12 * SECONDS_IN_HOUR)
    ax.yaxis.set_major_locator(plt.MultipleLocator(2 * SECONDS_IN_HOUR))
    ax.yaxis.set_minor_locator(plt.MultipleLocator(SECONDS_IN_HOUR))
    ax.yaxis.set_major_formatter(_format_ytick)
    ax.yaxis.set_label_text("")

    fig.tight_layout()
    fig.savefig(args.output)


def _build_dataframe(file):
    return pd.DataFrame.from_records(
        {"duration": ev.period().duration_seconds,
         "time":     _time_to_seconds(ev.since.time())}
        for ev in merge_adjoining(parse_events(file)))


def _time_to_seconds(t):
    return (t.second +
            t.minute * SECONDS_IN_MINUTE +
            t.hour   * SECONDS_IN_HOUR)


def _seconds_to_time(s):
    h, s = divmod(s, SECONDS_IN_HOUR)
    m, s = divmod(s, SECONDS_IN_MINUTE)
    return time(hour=h, minute=m, second=s)


if __name__ == "__main__":
    sys.exit(main(sys.argv))
